#+Title: Initial discussion about EDS representation in RDF

* example

  Two dogs are fighting

* eds

The EDS below was extracted from the file:1.txt file.

#+BEGIN_EXAMPLE
{e2:
 _1:udef_q<0:3>[BV x3]
 e9:card<0:3>("2"){e SF prop, TENSE untensed, MOOD indicative, PROG -, PERF -}[ARG1 x3]
 x3:_dog_n_1<4:8>{x PERS 3, NUM pl, IND +, PT pt}[]
 e2:_fight_v_1<13:21>{e SF prop, TENSE pres, MOOD indicative, PROG +, PERF -}[ARG1 x3]
}
#+END_EXAMPLE

* RDF

Using the =create-idex= script documented in
http://moin.delph-in.net/ErgWeSearch, we can obtain the the file
file:1-wsi.nq in the [[https://www.w3.org/TR/n-quads/][N-Quads]] format.

Unfortunately, this file is not a valid N-Quads. The manual edited
file fix the following errors:

1. IRIs may be written only as absolute IRIs. The nodes =<e9>= and
   =<_1>= are not valid absolute IRIs.

2. The predicate <http://www.w3.org/2000/01/rdf-schema#type> does not
   exist. The correct predicate for typing the nodes of an RDF graph
   is <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>.

The errors above were fixed in the file:1-wsi-edited.nq. Latter, using
the [[http://librdf.org/raptor/rapper.html][rapper]] tool, we can convert the file for a more human-readable
format, turtle.

#+BEGIN_SRC bash
% rapper -i nquads -c 1-wsi-edited.nq
rapper: Parsing URI file:///Users/ar/hpsg/text-entailment/tmp/data/rdf/1.nq with parser nquads
rapper: Parsing returned 63 triples 

% awk '{print $1,$2,$3,"."}' 1-wsi-edited.nq > 1-wsi-edited.nt
% rapper -i ntriples -f 'xmlns:eds="http://www.delph-in.net/rdf/eds#"' -o turtle 1-wsi-edited.nt > 1-wsi-edited.ttl
rapper: Parsing URI file:///Users/ar/hpsg/text-entailment/tmp/data/rdf/1.ntriples with parser ntriples
rapper: Serializing with serializer turtle
rapper: Parsing returned 63 triples
#+END_SRC

The file:1-wsi-edited.ttl is our starting point for proposing a better
RDF representation of an EDS. The content below is copied from the
file:1-proposed.ttl, it is composed by 26 triples. Note that we are
using two namespaces: erg (for what is ERG specific information) and
eds. An initial proposal (still incomplete) of EDS vocabulary is in
the file:eds.ttl.

#+BEGIN_EXAMPLE
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix eds: <http://www.delph-in.net/rdf/eds#> .
@prefix erg: <http://www.delph-in.net/rdf/eds#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://example.com/node/_1>
    eds:bv <http://example.com/node/x3> ;
    eds:predicate "udef_q"^^xsd:string .

<http://example.com/node/e2>
    erg:mood  erg:indicative ;
    erg:perf  "false"^^xsd:boolean ;
    erg:prog  true ;
    erg:sf    erg:prop ;
    erg:tense erg:pres ;
    eds:arg1  <http://example.com/node/x3> ;
    eds:predicate "_fight_v_1"^^xsd:string ;
    eds:top true ;
    a eds:Event .

<http://example.com/node/e9>
    erg:mood erg:indicative ;
    erg:perf false ;
    erg:prog false ;
    erg:sf   erg:prop ;
    erg:tense erg:untensed ;
    eds:arg1 <http://example.com/node/x3> ;
    eds:carg "2"^^xsd:integer ;
    eds:predicate "card"^^xsd:string ;
    a eds:Event .

<http://example.com/node/x3>
    erg:ind  true ;
    erg:num  erg:pl ;
    erg:pers "3"^^xsd:integer ;
    erg:pt   erg:pt ;
    eds:from "4"^^xsd:integer ;
    eds:to   "8"^^xsd:integer ;
    eds:predicate "_dog_n_1"^^xsd:string ;
    a eds:Individual .
#+END_EXAMPLE

* questions

- better document how IRIs for node identifiers should be created.
- complete the EDS vocabulary specification.
- define the ERG vocabulary.
- evaluate the ideias with one or more examples (e.g. predicates with
  more than one role).
